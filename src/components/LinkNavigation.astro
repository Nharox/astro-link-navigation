---
import type { HTMLAttributes } from 'astro/types';
import type { LinkKey } from '../models/link-key';

import { links, socialLinks } from '../data/links';
import Icon from './Icon.astro';

interface Props extends HTMLAttributes<'nav'> {
  hoverColor: string;
  activeLink: LinkKey;
}

const { hoverColor, activeLink, ...props } = Astro.props;
---

<nav aria-label="External links" {...props}>
  <ul>
    {
      links.map((link) => {
        const isActive = link.key === activeLink;

        return (
          <li>
            <a
              href={link.href}
              aria-current={isActive ? 'page' : undefined}
              class:list={['external-link', isActive && 'active-link']}
            >
              <Icon name={link.iconName} />
              {link.name}
            </a>
          </li>
        );
      })
    }
    {
      socialLinks.map((link) => (
        <li>
          <a href={link.href} class="external-link">
            <Icon name={link.iconName} />
            {link.name}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<style define:vars={{ 'hover-color': hoverColor }}>
  nav {
    padding-block: 1.5em;
    font-size: 16px;

    @media (width >= 1024px) {
      font-size: 18px;
    }
  }

  ul {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(150px, 100%), 1fr));
    gap: 1.5em;
    line-height: 1;

    @media (width >= 850px) {
      display: flex;
      column-gap: 2em;
    }
  }

  li:nth-last-child(2) {
    @media (width >= 850px) {
      margin-left: auto;
    }
  }

  .external-link {
    display: inline-flex;
    column-gap: 0.5em;
    align-items: center;
    color: currentcolor;
    text-decoration: none;
    text-wrap: nowrap;

    &:hover {
      color: var(--hover-color);
    }

    :global(svg) {
      flex: none;
      width: 1.2em;
      height: 1.2em;
    }
  }

  .active-link {
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 4px;
  }
</style>
